import Dropdown, { ERROR_MESSAGES } from './dropdown';


describe('Dropdown', () => {
	describe('constructor', () => {
		let $el;
		let testDropdown; // eslint-disable-line no-unused-vars

		beforeEach(() => {
			jasmine.getFixtures().fixturesPath = 'base/fixtures';
			loadFixtures('dropdown.fix.html');
			$el = $('.m-dropdown');
		});

		it('should have a constructor method', () => {
			expect(Dropdown.constructor).toBeDefined();
		});

		it('should throw an error when nothing is passed in the constructor', () => {
			expect(() => new Dropdown()).toThrowError(Error,
			ERROR_MESSAGES.constructor.wrongargument);
		});

		it('should throw an error when a string is passed in the constructor', () => {
			expect(() => new Dropdown('justastring')).toThrowError(Error,
			ERROR_MESSAGES.constructor.wrongargument);
		});

		it('should throw an error when element passed does not contain the js-m-dropdown__select class', () => {
			$('.js-m-dropdown__select').removeClass('js-m-dropdown__select');
			expect(() => new Dropdown($el)).toThrowError(Error,
			ERROR_MESSAGES.constructor.missingclass_js_m_dropdown_select
			+ ERROR_MESSAGES.constructor.missingclass);
		});

		it('should throw an error when element passed does not contain the js-m-dropdown__faux class', () => {
			$('.js-m-dropdown__faux').removeClass('js-m-dropdown__faux');
			expect(() => new Dropdown($el)).toThrowError(Error,
			ERROR_MESSAGES.constructor.missingclass_js_m_dropdown_faux
			+ ERROR_MESSAGES.constructor.missingclass);
		});

		it('should throw an error when element passed does not contain the js-m-dropdown__toggle', () => {
			$('.js-m-dropdown__toggle').removeClass('js-m-dropdown__toggle');
			expect(() => new Dropdown($el)).toThrowError(Error,
			ERROR_MESSAGES.constructor.missingclass_js_m_dropdown_toggle
			+ ERROR_MESSAGES.constructor.missingclass);
		});

		it('should throw an error when element passed does not contain the js-m-dropdown__option class', () => {
			$('.js-m-dropdown__option').removeClass('js-m-dropdown__option');
			expect(() => new Dropdown($el)).toThrowError(Error,
			ERROR_MESSAGES.constructor.missingclass_js_m_dropdown_option
			+ ERROR_MESSAGES.constructor.missingclass);
		});

		it('shuould throw an error when element passed does not contain the js-m-dropdown__text class', () => {
			$('.js-m-dropdown__text').removeClass('js-m-dropdown__text');
			expect(() => new Dropdown($el)).toThrowError(Error,
			ERROR_MESSAGES.constructor.missingclass_js_m_dropdown_text
			+ ERROR_MESSAGES.constructor.missingclass);
		});

		it('should throw an error when element passed does not contain the option element', () => {
			$('option').remove();
			expect(() => new Dropdown($el)).toThrowError(Error,
			ERROR_MESSAGES.constructor.missingelement_option
			+ ERROR_MESSAGES.constructor.missingelement);
		});
		it('should invoke generalClickHandler when a click happens on html', () => {
			spyOn(Dropdown.prototype, 'generalClickHandler');
			testDropdown = new Dropdown($el);
			$('html').click();
			expect(testDropdown.generalClickHandler).toHaveBeenCalled();
		});
	});
	describe('replaceDropdown', () => {
		let $el;
		let testDropdown; // eslint-disable-line no-unused-vars

		beforeEach(() => {
			jasmine.getFixtures().fixturesPath = 'base/fixtures';
			loadFixtures('dropdown.fix.html');
			$el = $('.m-dropdown');
			testDropdown = new Dropdown($el);
		});

		it('should add class js-hidden to the exisiting js-m-dropdown__select', () => {
			expect($('.js-m-dropdown__select')).toHaveClass('js-hidden');
		});
		it('should add class visible to the exisiting js-m-dropdown_faux', () => {
			expect($('.js-m-dropdown__faux')).toHaveClass('js-visible');
		});
	});
	describe('toggle', () => {
		let $el;
		let testDropdown; // eslint-disable-line no-unused-vars

		beforeEach(() => {
			jasmine.getFixtures().fixturesPath = 'base/fixtures';
			loadFixtures('dropdown.fix.html');
			$el = $('.m-dropdown');
			testDropdown = new Dropdown($el);
		});
		it('adds class is-opened on js-m-dropdown__faux on first call', () => {
			$('.js-m-dropdown__toggle').click();
			expect($('.js-m-dropdown__faux')).toHaveClass('is-opened');
		});
		it('removes class is-opened on js-m-dropdown-faux on second call', () => {
			$('.js-m-dropdown__toggle').click();
			$('.js-m-dropdown__toggle').click();
			expect($('.js-m-dropdown__faux')).not.toHaveClass('is-opened');
		});
	});
	describe('registerEventListeners', () => {
		let $el;
		let testDropdown; // eslint-disable-line no-unused-vars

		beforeEach(() => {
			jasmine.getFixtures().fixturesPath = 'base/fixtures';
			loadFixtures('dropdown.fix.html');
			$el = $('.m-dropdown');
		});
		it('expects to have 1 click event on .js-m-dropdown__option', () => {
			testDropdown = new Dropdown($el);
			const numberOfEvents = $._data($('.js-m-dropdown__option').get(0), 'events').click.length;
			expect(numberOfEvents).toEqual(1);
		});
		it('expects to have 2 click events on .js-m-m-dropdown__toggle', () => {
			testDropdown = new Dropdown($el);
			const numberOfEvents = $._data($('.js-m-dropdown__toggle').get(0), 'events').click.length;
			expect(numberOfEvents).toEqual(2);
		});
		it('expects toogle to be invoked by clicking on .js-m-dropdown__toggle', () => {
			spyOn(Dropdown.prototype, 'toggle');
			testDropdown = new Dropdown($el);
			$('.js-m-dropdown__toggle').trigger('click');
			expect(testDropdown.toggle).toHaveBeenCalled();
		});
		it('expects startListeningForKeyboardNavigation to be invoked by clicking on .js-m-dropdown__toggle', () => {
			spyOn(Dropdown.prototype, 'startListeningForKeyboardNavigation');
			testDropdown = new Dropdown($el);
			$('.js-m-dropdown__toggle').trigger('click');
			expect(testDropdown.startListeningForKeyboardNavigation).toHaveBeenCalled();
		});
		it('expects selectOption to be invoked by clicking on .js-m-dropdown__option', () => {
			spyOn(Dropdown.prototype, 'selectOption');
			testDropdown = new Dropdown($el);
			$('.js-m-dropdown__option').trigger('click');
			expect(testDropdown.selectOption).toHaveBeenCalled();
		});
	});
	describe('startListeningForKeyboardNavigation', () => {
		let $el;
		let testDropdown;
		beforeEach(() => {
			jasmine.getFixtures().fixturesPath = 'base/fixtures';
			loadFixtures('dropdown.fix.html');
			$el = $('.m-dropdown');
		});
		it('expects keyboardNaviagtionhandler to be triggered when keydown was pressed', () => {
			spyOn(Dropdown.prototype, 'keyboardNavigationHandler');
			testDropdown = new Dropdown($el);
			const e = new $.Event('keydown');
			e.keyCode = 40;
			$('.js-m-dropdown__toggle').trigger('click');
			$el.trigger(e);
			expect(testDropdown.keyboardNavigationHandler).toHaveBeenCalled();
		});
		/* it('expects focusedOption to be -1 after first click on dropdown', () => {
			testDropdown = new Dropdown($el);
			$('.js-m-dropdown__toggle').trigger('click');
			expect(testDropdown.focusedOption).toEqual(-1); // !!!!!!!!!!!!!!!!!!!!!!!!!!!
		}); */
	});
	describe('close', () => {
		let $el;
		let testDropdown; // eslint-disable-line no-unused-vars
		beforeEach(() => {
			jasmine.getFixtures().fixturesPath = 'base/fixtures';
			loadFixtures('dropdown.fix.html');
			$el = $('.m-dropdown');
		});
		it('expects to remove class is-opened', () => {
			testDropdown = new Dropdown($el);
			$('.js-m-dropdown__toggle').trigger('click');
			expect($('.js-m-dropdown__faux')).toHaveClass('is-opened');
			$('.js-m-dropdown__toggle').trigger('click');
			expect($('.js-m-dropdown__faux')).not.toHaveClass('is-opened');
		});
		it('expects to have stopListenForKeyboardnavigation invoked', () => {
			spyOn(Dropdown.prototype, 'stopListeningForKeyboardNavigation');
			testDropdown = new Dropdown($el);
			$('.js-m-dropdown__toggle').trigger('click');
			expect($('.js-m-dropdown__faux')).toHaveClass('is-opened');
			$('.js-m-dropdown__toggle').trigger('click');
			expect(testDropdown.stopListeningForKeyboardNavigation).toHaveBeenCalled();
		});
	});
	/* describe('keyboardNavigationHandler', () => {
		let $el;
		let testDropdown;
		beforeEach(() => {
			jasmine.getFixtures().fixturesPath = 'base/fixtures';
			loadFixtures('dropdown.fix.html');
			$el = $('.m-dropdown');
		});
		it('expects focusNextOption to be invoked by pressing key down', () => {
			spyOn(Dropdown.prototype, 'focusNextOption');
			testDropdown = new Dropdown($el);
			$('.js-m-dropdown__toggle').trigger('click');
			$('.m-option').trigger('keydown');
			expect(testDropdown.focusNextOption).toHaveBeenCalled();
		});
	});*/
});
