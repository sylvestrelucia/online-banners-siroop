const selectors = {
	panel: '.js-o-filter-panel__panel',
	subPanelButton: '.js-o-filter-panel__item-link',
	backButton: '.js-o-filter-panel__back',
};

const classes = {
	isInactive: 'is-inactive',
	isOpen: 'is-open',
	isUnscrollable: 'is-unscrollable',
};

const dataAttr = {
	trigger: 'data-trigger-by',
};

class FilterPanel {
	constructor($el) {
		this.window = window;
		this.document = document;

		this.$el = $el;
		this.$body = $(this.document.body);
		this.$window = $(this.window);
		this.$panel = this.$el.find(selectors.panel);
		this.$triggerButton = this.$body.find(this.$panel.attr(dataAttr.trigger) ? `.${this.$panel.attr(dataAttr.trigger)}` : '');
		this.$subPanelButton = this.$el.find(selectors.subPanelButton);
		this.$backButton = this.$el.find(selectors.backButton);
		this.$window.on('resize', this.debounce(this.onWindowResize.bind(this), 400));
		this.registerEventListeners();
	}

	registerEventListeners() {
		if (this.window.matchMedia('(min-width: 768px)').matches) {
			this.registerMediumAndUpViewportEvents();
		} else {
			this.registerSmallViewportEvents();
		}
	}

	registerSmallViewportEvents() {
		this.$panel.attr('tabindex', '-1');
		this.$triggerButton.on('click', this.onTriggerButtonClick.bind(this));
		this.$subPanelButton.on('click', this.onSubPanelButtonClick.bind(this));
		this.$backButton.on('click', this.onBackButtonClick.bind(this));
	}

	registerMediumAndUpViewportEvents() {
		this.closeAllPanel();
		this.$panel.removeAttr('tabindex');
		this.$triggerButton.off();
		this.$subPanelButton.off();
		this.$backButton.off();
	}

	debounce(fn, wait) {
		let timeout;
		return (...args) => {
			clearTimeout(timeout);
			timeout = setTimeout(() => fn.apply(this, args), (wait || 1));
		};
	}

	closeAllPanel() {
		this.$panel.removeClass(classes.isOpen);
		this.$body.removeClass(classes.isUnscrollable);
	}

	openPanel() {
		this.$panel.off();
		this.closeAllPanel();
		this.$panel.first().toggleClass(classes.isOpen);
		this.$body.addClass(classes.isUnscrollable);
	}

	openSubPanel($selected) {
		this.$panel.off();
		$selected.next(selectors.panel).addClass(classes.isOpen).on('focusout', () => this.onFocusPanel($selected));
		$selected.closest(selectors.panel).addClass(classes.isInactive);
	}

	closePanel($target) {
		if ($target.parents(selectors.panel).length === 1) {
			this.$body.removeClass(classes.isUnscrollable);
			this.$triggerButton.focus();
		}

		$target.closest(selectors.panel).removeClass(classes.isOpen);
	}

	// Events
	onBackButtonClick(e) {
		e.preventDefault();
		const $el = $(e.currentTarget);
		this.closePanel($el);
	}

	onWindowResize() {
		this.registerEventListeners();
	}

	onFocusPanel($target) {
		setTimeout(() => {
			const isOpen = $target.not(`.${classes.isInactive}`).hasClass(classes.isOpen);
			const isActive = $.contains($target[0], this.document.activeElement);
			if (!isActive && isOpen) {
				$target.focus();
			}
		}, 0);
	}

	onTriggerButtonClick(e) {
		e.preventDefault();
		this.openPanel();
	}

	onSubPanelButtonClick(e) {
		e.preventDefault();
		this.openSubPanel($(e.currentTarget));
	}
}

export default FilterPanel;
