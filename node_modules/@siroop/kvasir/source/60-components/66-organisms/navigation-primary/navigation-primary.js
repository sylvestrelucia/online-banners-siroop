import 'jquery-menu-aim';

const selectors = {
	panel: '.js-o-navigation-primary__panel',
	panelSecondLevel: '.js-o-navigation-primary__sec-lvl-panel',
	pageTemplate: '.js-page-template',
	backButton: '.js-o-navigation-primary__back',
	closeButton: '.js-o-navigation-primary__close',
	firstLvlList: '.js-o-navigation-primary__first-lvl-list',
	firstLvlItem: '.js-o-navigation-primary__first-lvl-item',
	firstLvlItemLink: '.js-o-navigation-primary__first-lvl-item-link',
	secLvlItem: '.js-o-navigation-primary__sec-lvl-item',
	secLvlItemLink: '.js-o-navigation-primary__sec-lvl-item-button',
};

const classes = {
	bodyOverlay: 'has-overlay',
	isInactive: 'is-inactive',
	isActive: 'is-active',
	isOpen: 'is-open',
	isUnscrollable: 'is-unscrollable',
	isInvisible: 'is-invisible',
};

const options = {
	menuAimTolerance: 75,
	resizeDebounceTime: 400,
	hoverDelay: 75,
};

const dataAttr = {
	trigger: 'data-trigger-by',
};


class NavigationPrimary {
	constructor($el) {
		this.timeoutHover = false;
		this.navLevelOneIsOpen = false;
		this.isNavLevelTwoOpen = false;
		this.window = window;
		this.document = document;
		this.$el = $el;
		this.$body = $(this.document.body);
		this.$window = $(this.window);
		this.$panel = this.$el.find(selectors.panel);
		this.$pageTemplate = this.$el.find(selectors.pageTemplate);
		this.$panelSecondLevel = this.$el.find(selectors.panelSecondLevel);
		this.$backButton = this.$el.find(selectors.backButton);
		this.$closeButton = this.$el.find(selectors.closeButton);
		this.$firstLvlItem = this.$el.find(selectors.firstLvlItem);
		this.$firstLvlItemLink = this.$el.find(selectors.firstLvlItemLink);
		this.$secLvlItemLink = this.$el.find(selectors.secLvlItemLink);
		this.$triggerButton = this.$body.find(this.$panel.attr(dataAttr.trigger) ? `.${this.$panel.attr(dataAttr.trigger)}` : '');
		this.resetNav();
		this.registerEventListeners();
		this.$window.on('resize', this.debounce(this.registerEventListeners.bind(this), options.resizeDebounceTime));
	}

	activateMenuAim() {
		this.$panelSecondLevel.eq(0).menuAim({
			rowSelector: selectors.secLvlItem,
			tolerance: options.menuAimTolerance,
			activate: (e) => {
				this.openLevelTwo($(e).find(selectors.secLvlItemLink));
			},
			deactivate: (e) => {
				this.closeLevelTwo($(e).find(selectors.secLvlItemLink));
			},
		});
	}

	registerEventListeners() {
		if (this.window.matchMedia('(min-width: 768px)').matches) {
			this.unregisterSmViewportEvents();
			this.registerLgViewportEvents();
			this.closeAllLevelOne();
			this.removeOverlay();
			this.$panel.removeAttr('tabindex');
			this.activateMenuAim();
		} else {
			this.removeOverlay();
			this.unregisterLgViewportEvents();
			this.registerSmViewportEvents();
			this.$panel.attr('tabindex', '-1');
		}
	}

	registerLgViewportEvents() {
		this.$body.on('click touchend', this.onBodyClickLg.bind(this));
		window.addEventListener('hashchange', ev => this.onHashChange(ev));
		this.$firstLvlItemLink.on('click', this.onFirstLvlItemClickLg.bind(this));
		this.$secLvlItemLink.on('click', this.onSecLvlItemLinkClick.bind(this));
		$(document).on('keyup', this.onPressEsc.bind(this));
	}

	unregisterLgViewportEvents() {
		this.$body.off('click');
		this.$secLvlItemLink.off('click mouseenter mouseleave');
		this.$firstLvlItemLink.off('click');
		$(document).off('keyup');
	}

	registerSmViewportEvents() {
		this.$body.on('click touchend', this.onBodyClick.bind(this));
		window.addEventListener('hashchange', ev => this.onHashChange(ev));
		this.$triggerButton.click(this.onBurgerButtonClick.bind(this)); // enables click on svg...
		this.$secLvlItemLink.on('click', this.onSecLvlItemClick.bind(this));
		this.$backButton.on('click', this.onBackButtonClick.bind(this));
		this.$closeButton.on('click', this.onCloseButtonClick.bind(this));
		this.$firstLvlItemLink.on('click', this.onFirstLvlItemClick.bind(this));
	}

	unregisterSmViewportEvents() {
		this.$body.off('click');
		this.$triggerButton.off('click');
		this.$secLvlItemLink.off('click');
		this.$backButton.off('click');
		this.$closeButton.off('click');
		this.$firstLvlItemLink.off('click');
	}

	debounce(fn, wait) {
		let timeout;
		return (...args) => {
			clearTimeout(timeout);
			timeout = setTimeout(() => fn.apply(this, args), (wait || 1));
		};
	}

	resetNav() {
		this.$body
			.find(selectors.firstLvlItem)
			.removeClass(classes.isActive);

		this.$panel
			.removeClass(classes.isOpen);

		this.$body
			.removeClass(classes.isUnscrollable);

		this.removeOverlay();
		this.navLevelOneIsOpen = false;
		this.panelIsOpen = false;
	}


	/* eslint-disable class-methods-use-this */
	closeSiblingsLevelOne($selected) {
		$selected
			.parents(selectors.firstLvlList)
			.parent().siblings()
			.find(selectors.firstLvlItem)
			.removeClass(classes.isActive);
	}

	/* eslint-enable class-methods-use-this */
	/* eslint-disable class-methods-use-this */

	// TODO:: bug doesn't close siblings
	closeSiblingsLevelTwo($selected) {
		$selected
			.parent()
			.siblings(selectors.secLvlItem)
			.removeClass(classes.isActive);
	}

	/* eslint-enable class-methods-use-this */

	addOverlay() {
		setTimeout(() => {
			this.$body.addClass(classes.bodyOverlay);
		});
	}

	removeOverlay() {
		this.$body.removeClass(classes.bodyOverlay);
	}

	closeMainNav() {
		this.$body
			.find(selectors.firstLvlItem)
			.removeClass(classes.isActive);
	}

	openLevelOne($target) {
		$target
			.parent(selectors.firstLvlItem)
			.addClass(classes.isActive);

		this.navLevelOneIsOpen = true;
	}

	closeLevelOne($target) {
		$target
			.parent(selectors.firstLvlItem)
			.removeClass(classes.isActive);

		this.navLevelOneIsOpen = false;
	}

	closeAllLevelOne() {
		$(selectors.firstLvlItem).removeClass(classes.isActive);
		this.navLevelOneIsOpen = false;
	}

	/* eslint-disable class-methods-use-this */
	openLevelTwo(selected) {
		selected
			.parent()
			.addClass(classes.isActive);

		selected
			.next(selectors.panel)
			.removeClass(classes.isInvisible);

		this.isNavLevelTwoOpen = true;
	}

	closeLevelTwo(selected) {
		selected
			.parent()
			.removeClass(classes.isActive);

		selected
			.next(selectors.panel)
			.addClass(classes.isInvisible);

		this.isNavLevelTwoOpen = false;
	}

	/* eslint-enable class-methods-use-this */

	openPanel() {
		this.$body
			.find(selectors.firstLvlItem)
			.removeClass(classes.isActive);

		this.$panel
			.removeClass(classes.isOpen);

		this.$panel
			.first()
			.toggleClass(classes.isOpen)
			.on('focusout', this.onFocusPanel.bind(this));

		this.$body
			.addClass(classes.isUnscrollable);

		this.$firstLvlItem
			.addClass(classes.isActive);

		this.panelIsOpen = true;
	}

	closePanel() {
		this.$body
			.find(selectors.firstLvlItem)
			.removeClass(classes.isActive);

		this.$panel
			.removeClass(classes.isOpen);

		this.$body
			.removeClass(classes.isUnscrollable);

		this.panelIsOpen = false;
	}

	// Events Large Viewport
	onFirstLvlItemClickLg(e) {
		e.preventDefault();
		const $el = $(e.currentTarget);
		this.closeSiblingsLevelOne($el);

		if (!$el.parent(selectors.firstLvlItem).hasClass(classes.isActive)) {
			this.openLevelOne($el);
			this.addOverlay();
		} else {
			this.closeLevelOne($el);
			this.removeOverlay();
		}
	}

	onHashChange() {
		this.resetNav();
	}

	/* eslint-disable class-methods-use-this */
	onSecLvlItemLinkClick(e) {
		const $selected = $(e.currentTarget);
		this.closeSiblingsLevelTwo($selected);
		this.openLevelTwo($selected);
	}

	/* eslint-disable class-methods-use-this */
	onFirstLvlItemClick(e) {
		e.preventDefault();
		const selected = $(e.currentTarget);
		selected
			.parent(selectors.firstLvlItem)
			.toggleClass(classes.isActive);
	}

	/* eslint-enable class-methods-use-this */
	onSecLvlItemClick(e) {
		const selected = $(e.currentTarget);
		this.$panel.off();

		selected
			.next(selectors.panel)
			.addClass(classes.isOpen)
			.on('focusout', this.onFocusPanel.bind(this));

		selected
			.closest(selectors.panel)
			.addClass(classes.isInactive);
	}

	onCloseButtonClick() {
		this.removeOverlay();
		this.closePanel();
	}

	onBodyClickLg(e) {
		const notFirstLvlButton = !$(e.target).closest(this.$firstLvlItemLink).length;
		const notPanel = !$(e.target).closest(selectors.panel).length;

		if (this.navLevelOneIsOpen && notFirstLvlButton && notPanel) {
			this.closeMainNav();
			this.closePanel();
			this.removeOverlay();
			this.navLevelOneIsOpen = false;
		}
	}

	onPressEsc(e) {
		if (e.keyCode === 27 && this.$body.find(selectors.firstLvlItem).hasClass(classes.isActive)) {
			this.closeMainNav();
			this.removeOverlay();
			this.navLevelOneIsOpen = false;
		}
	}

	// Events Small Viewport
	onBurgerButtonClick(e) {
		e.preventDefault();
		this.$body.addClass(classes.bodyOverlay);
		this.openPanel();
	}

	onBackButtonClick(e) {
		const selected = $(e.currentTarget);

		if (selected.parents(selectors.panel).length === 1) {
			this.$body.removeClass(classes.isUnscrollable);
			this.$triggerButton.focus();
		}

		selected.closest(selectors.panel).removeClass(classes.isOpen);
		selected.parents().find(`${selectors.panel}.${classes.isInactive}`).last()
			.removeClass(classes.isInactive)
			.on('focusout', this.onFocusPanel.bind(this));
	}

	onFocusPanel(e) {
		window.setTimeout(() => {
			const isOpen = $(e.currentTarget).not(`.${classes.isInactive}`).hasClass(classes.isOpen);
			const isActive = $.contains($(e.currentTarget)[0], this.document.activeElement);

			if (!isActive && isOpen) {
				$(e.currentTarget).focus();
			}
		}, 0);
	}

	onBodyClick(e) {
		const notBurgerButton = !$(e.target).closest(this.$triggerButton).length;
		const notPanel = !$(e.target).closest(selectors.panel).length;

		if (this.panelIsOpen && notBurgerButton && notPanel) {
			this.closePanel();
			this.removeOverlay();
			this.panelIsOpen = false;
		}
	}
}

export default NavigationPrimary;
