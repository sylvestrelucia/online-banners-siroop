import NavigationPrimary from './navigation-primary';

describe('NavigationPrimary', () => {
	let $el;
	let navigationPrimary;

	const selectors = {
		openPanelButton: '.o-navigation-primary__burger-button',
		navigation: '.o-navigation-primary',
		panel: '.js-o-navigation-primary__panel',
		pageTemplate: '.js-page-template',
		backButton: '.js-o-navigation-primary__back',
		closeButton: '.js-o-navigation-primary__close',
		firstLvlItem: '.js-o-navigation-primary__first-lvl-item',
		firstLvlItemLink: '.js-o-navigation-primary__first-lvl-item-link',
		secLvlItem: '.js-o-navigation-primary__sec-lvl-item',
		secLvlItemLink: '.js-o-navigation-primary__sec-lvl-item-button',
	};

	const classes = {
		navIsActive: 'nav-is-active',
		isInactive: 'is-inactive',
		isActive: 'is-active',
		isOpen: 'is-open',
		isUnscrollable: 'is-unscrollable',
		isInvisible: 'is-invisible',
	};

	describe('on large viewport', () => {
		beforeEach(() => {
			jasmine.getFixtures().fixturesPath = 'base/fixtures';
			loadFixtures('navigation-primary.fix.html');
			$el = $(selectors.navigation);
			viewport.set('large');

		});

		describe('Check constructor', () => {
			beforeEach(() => {
				navigationPrimary = new NavigationPrimary($el);
			});

			it('should have a constructor method', () => {
				expect(navigationPrimary.constructor).toBeDefined();
			});

			it('should have a element in dom', () => {
				expect($el).toBeInDOM();
			});

			it('should be an instance of "NavigationPrimary"', () => {
				expect(navigationPrimary instanceof NavigationPrimary).toBeTruthy();
			});

			it('should have a data-trigger-by attribute', () => {
				expect($(selectors.panel)
					.eq(0))
					.toHaveAttr(
						'data-trigger-by',
						'o-navigation-primary__burger-button',
					);
			});
		});

		describe('Show main navigation', () => {
			beforeEach(() => {
				spyOn(NavigationPrimary.prototype, 'onFirstLvlItemClickLg').and.callThrough();
				navigationPrimary = new NavigationPrimary($el);
			});

			it('should have a registerEventListeners method', () => {
				expect(navigationPrimary.registerEventListeners).toBeDefined();
			});

			it('should open main navigation', () => {
				$(selectors.firstLvlItemLink)[0].click();
				expect($(selectors.firstLvlItem)[0]).toHaveClass(classes.isActive);
			});

			it('should show only one top level navigation item', () => {
				expect($(selectors.firstLvlItem)
					.eq(0))
					.not.toHaveClass(classes.isActive);
				expect($(selectors.firstLvlItem)
					.eq(1))
					.not.toHaveClass(classes.isActive);
				expect($('body'))
					.not.toHaveClass(classes.navIsActive);

				$(selectors.firstLvlItemLink)[0]
					.click();
				expect($(selectors.firstLvlItem)[0])
					.toHaveClass(classes.isActive);
				expect($(selectors.firstLvlItem)[1])
					.not.toHaveClass(classes.isActive);
				expect($('body'))
					.toHaveClass(classes.navIsActive);

				$(selectors.firstLvlItemLink)[1]
					.click();
				expect($(selectors.firstLvlItem)[1])
					.toHaveClass(classes.isActive);
				expect($(selectors.firstLvlItem)[0])
					.not.toHaveClass(classes.isActive);
				expect($('body'))
					.toHaveClass(classes.navIsActive);
			});
		});

		describe('Show second level navigation', () => {
			beforeEach(() => {
				navigationPrimary = new NavigationPrimary($el);
				$(selectors.firstLvlItemLink)[0]
					.click();
			});

			it('Should show only one navigation sub item on click', () => {
				expect($(selectors.firstLvlItem)
					.eq(0).find(selectors.secLvlItem + '.' + classes.isActive).length)
					.toEqual(0);

				expect($(selectors.firstLvlItem + '.' + classes.isActive)
					.find(selectors.secLvlItem)
					.children(selectors.panel + '.' + classes.isInvisible).length)
					.toEqual(10);


				$(selectors.firstLvlItem + '.' + classes.isActive)
					.find(selectors.secLvlItem)
					.find(selectors.secLvlItemLink)[0]
					.click();

				expect($(selectors.firstLvlItem)
					.eq(0)
					.find(selectors.secLvlItem + '.' + classes.isActive).length)
					.toEqual(1);

				expect($(selectors.firstLvlItem + '.' + classes.isActive)
					.find(selectors.secLvlItem)
					.children(selectors.panel + '.' + classes.isInvisible).length)
					.toEqual(9);


				$(selectors.firstLvlItem + '.' + classes.isActive)
					.find(selectors.secLvlItem)
					.find(selectors.secLvlItemLink)[4]
					.click();

				expect($(selectors.firstLvlItem)
					.eq(0)
					.find(selectors.secLvlItem + '.' + classes.isActive).length)
					.toEqual(1);

				expect($(selectors.firstLvlItem + '.' + classes.isActive)
					.find(selectors.secLvlItem)
					.children(selectors.panel + '.' + classes.isInvisible).length)
					.toEqual(9);

			});
		});

		describe('Close navigation', () => {
			beforeEach(() => {
				spyOn(NavigationPrimary.prototype, 'onBodyClickLg').and.callThrough();
				spyOn(NavigationPrimary.prototype, 'closeMainNav').and.callThrough();

				navigationPrimary = new NavigationPrimary($el);
			});

			it('Should close the navigation on click outside of the navigation area', () => {
				$('body').click();
				expect(navigationPrimary.onBodyClickLg)
					.toHaveBeenCalled();
				expect(navigationPrimary.closeMainNav)
					.not.toHaveBeenCalled();

				$(selectors.firstLvlItemLink)[0]
					.click();

				$('body')
					.click();

				expect(navigationPrimary.onBodyClickLg)
					.toHaveBeenCalled();

				expect(navigationPrimary.closeMainNav)
					.toHaveBeenCalled();

				expect($('body'))
					.not.toHaveClass(classes.navIsActive);
			});
		});
	});
	describe('On small viewport', () => {
		beforeEach(() => {
			jasmine.getFixtures().fixturesPath = 'base/fixtures';
			loadFixtures('navigation-primary.fix.html');
			$el = $(selectors.navigation);
			viewport.set('small');

		});

		describe('Open navigation panel', () => {
			beforeEach(() => {
				navigationPrimary = new NavigationPrimary($el);
			});

			it('Should open navigation panel on burger button click', () => {
				expect($(selectors.panel)
					.eq(0))
					.not.toHaveClass(classes.isOpen);

				expect($('body'))
					.not.toHaveClass(classes.isUnscrollable);

				expect($('body'))
					.not.toHaveClass(classes.navIsActive);

				$(selectors.openPanelButton)[0]
					.click();

				expect($(selectors.panel)
					.eq(0))
					.toHaveClass(classes.isOpen);

				expect($('body'))
					.toHaveClass(classes.isUnscrollable);

				expect($('body'))
					.toHaveClass(classes.navIsActive);
			});

			it('Should open and close first level navigation item on click', () => {
				$(selectors.openPanelButton)[0]
					.click();

				expect($(selectors.firstLvlItem)
					.eq(0))
					.toHaveClass(classes.isActive);

				$(selectors.firstLvlItemLink)[0]
					.click();

				expect($(selectors.firstLvlItem)
					.eq(0))
					.not.toHaveClass(classes.isActive);
			});

			it('Should open the inner panel on second level element click', () => {
				$(selectors.openPanelButton)[0]
					.click();

				$(selectors.firstLvlItem + '.' + classes.isActive)
				.find(selectors.secLvlItem)
				.find(selectors.secLvlItemLink)[0]
				.click();

				expect($(selectors.firstLvlItem + '.' + classes.isActive)
					.find(selectors.secLvlItem)
					.find(selectors.secLvlItemLink)
					.eq(0)
					.next(selectors.panel))
					.toHaveClass(classes.isOpen);

				expect($(selectors.firstLvlItem + '.' + classes.isActive)
					.find(selectors.secLvlItem)
					.find(selectors.secLvlItemLink)
					.eq(0)
					.closest(selectors.panel))
					.toHaveClass(classes.isInactive);
			});
		});

		describe('Go back to the previous panel', () => {
			beforeEach(() => {
				navigationPrimary = new NavigationPrimary($el);
				$(selectors.openPanelButton)[0]
					.click();

				$(selectors.firstLvlItem + '.' + classes.isActive)
					.find(selectors.secLvlItem)
					.find(selectors.secLvlItemLink)[0]
					.click();
			});

			it('Should return to the previous panel after back button is clicked', () => {
				$(selectors.backButton)[0]
					.click();

				expect($(selectors.backButton)
					.closest(selectors.panel))
					.not.toHaveClass(classes.isOpen);

				expect($(selectors.backButton)
					.parents()
					.find(selectors.panel))
					.not.toHaveClass(classes.isInactive);
			});
		});

		describe('CloseNavPanel', () => {
			beforeEach(() => {
				navigationPrimary = new NavigationPrimary($el);
				$(selectors.openPanelButton)[0]
					.click();
			});

			it('should close navigation panel on close button click', () => {
				$(selectors.closeButton)[0]
					.click();

				expect($('body'))
					.not.toHaveClass(classes.navIsActive);

				expect($(selectors.panel))
					.not.toHaveClass(classes.isOpen);

				expect($('body'))
					.not.toHaveClass(classes.isUnscrollable);
			});
		});
	});
});
