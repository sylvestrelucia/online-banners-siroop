import Notification, { ERROR_MESSAGES } from './notification';


describe('Notification', () => {
	let $el;
	let testNotification; // eslint-disable-line no-unused-vars

	beforeEach(() => {
		jasmine.getFixtures().fixturesPath = 'base/fixtures';
		loadFixtures('notification.fix.html');
		$el = $('.o-notification');
	});

	xit('should handle click event', () => {
		testNotification = new Notification($el);
		const spyEvent = spyOnEvent('.js-notification-close', 'click');
		$('.js-notification-close').click();
		expect(spyEvent).toHaveBeenTriggered();
	});

	it('should add class is-hidden to notification after click', () => {
		testNotification = new Notification($el);
		expect($el).not.toHaveClass('is-hidden');
		// click close button
		$el.find('.js-notification-close').click();
		// check that the dom has changed
		expect($el).toHaveClass('is-hidden');

		const computedStyle = window.getComputedStyle($el.get(0), null).getPropertyValue("pointer-events");
		console.log(computedStyle);

		window.setTimeout( () => {
			expect(computedStyle).toBe('none');
		}, 1000);

	});
});
