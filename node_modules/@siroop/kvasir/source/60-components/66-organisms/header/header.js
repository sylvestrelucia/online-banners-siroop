const selectors = {
	buttonsWithSubmenu: '.js-o-header__link-with-children',
	buttonSubMenu: '.js-o-header__link-with-children-list',
	buttonSubMenuListItem: '.js-o-header__link-with-children-list-item-link',
};

const states = {
	active: 'active',
	open: 'open',
};

const classes = {
	bodyOverlay: 'has-overlay',
};

class Header {
	constructor($el) {
		this.document = document;
		this.$body = $(this.document.body);

		this.el = $el.get(0); // no jquery on purpose
		this.body = document.body;
		this.buttonsWithSubmenu = this.el.querySelectorAll(selectors.buttonsWithSubmenu);
		this.openMenu = false;
		window.addEventListener('keyup', evt => this.onPressEsc(evt));

		// Handle items with submenus
		[].forEach.call(this.buttonsWithSubmenu, (item) => {
			item.addEventListener('click', evt => this.onButtonsWithSubmenuClick(evt));
		});

		// Closes menus on a click everywhere but the open button and menu
		this.body.addEventListener('click', evt => this.onBodyClick(evt));
	}

	toggleSubMenu(handler) {
		const submenu = handler.parentElement.querySelector(selectors.buttonSubMenu);
		if (!this.openMenu) {
			handler.classList.add(states.active);
			submenu.classList.add(states.open);
			this.openMenu = handler;
			[].forEach.call(submenu.querySelectorAll(selectors.buttonSubMenuListItem), (item) => { // eslint-disable-line max-len
				item.removeAttribute('tabindex');
			});
			setTimeout(() => { this.body.classList.add(classes.bodyOverlay); });
		} else {
			handler.classList.remove(states.active);
			submenu.classList.remove(states.open);
			this.openMenu = false;
			[].forEach.call(submenu.querySelectorAll(selectors.buttonSubMenuListItem), (item) => { // eslint-disable-line max-len
				item.setAttribute('tabindex', '-1');
			});
			this.body.classList.remove(classes.bodyOverlay);
		}
	}

	// Events
	onButtonsWithSubmenuClick(ev) { // eslint-disable-line class-methods-use-this
		ev.preventDefault();
		const el = ev.currentTarget;
		this.toggleSubMenu(el);
	}

	onBodyClick(evt) {
		const isSubMenuOpen = this.openMenu;
		const isNotButton = !$(evt.target)
			.closest(this.$body.find(selectors.buttonsWithSubmenu)).length;
		const isNotSubMenuItem = !$(evt.target)
			.closest(this.$body.find(selectors.buttonSubMenuListItem)).length;

		if (isSubMenuOpen && isNotButton && isNotSubMenuItem) {
			this.toggleSubMenu(this.openMenu);
		}
	}

	onPressEsc(e) {
		if (e.keyCode === 27 && this.openMenu) {
			this.toggleSubMenu(this.openMenu);
		}
	}
}

export default Header;
