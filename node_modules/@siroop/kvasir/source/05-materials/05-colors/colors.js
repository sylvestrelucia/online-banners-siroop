import Clipboard from 'clipboard';
/* eslint class-methods-use-this: ["error", { "exceptMethods": ["rgb2hex"] }] */

const selectors = {
	swatch: '.js-sg-swatch',
	swatchColor: '.js-sg-swatch-color',
	swatchValue: '.js-sg-swatch-value__rgb',
	swatchHex: '.js-sg-swatch-value__hex',
	swatchCopy: '.js-copy-color',
	swatchClipboard: '.js-clipboard',
};

const states = {
	isActive: 'is-active',
};

class MatColors {
	constructor($el) {
		const _this = this;
		this.$el = $el;
		this.$elements = this.$el.find(selectors.swatch);
		this.$elements.each((i, item) => {
			const $item = $(item);
			const color = $item.find(selectors.swatchColor).css('background-color');
			$item.find(selectors.swatchValue).html(color);
			$item.find(selectors.swatchHex).html(_this.rgb2hex(color));
			const copyItem = item.querySelectorAll(selectors.swatchCopy);
			const clb = new Clipboard(copyItem, {
				target: trigger => trigger,
			});

			clb.on('success', (e) => {
				const $clipboard = $(e.trigger).prevAll(selectors.swatchClipboard);
				$clipboard.addClass(states.isActive);
				window.setTimeout(() => $clipboard.removeClass(states.isActive), 300);
			});
		});
	}

	rgb2hex(orig) {
		const rgb = orig.replace(/\s/g, '').match(/^rgba?\((\d+),(\d+),(\d+)/i);
		return (rgb && rgb.length === 4) ? `#${
			(`0${parseInt(rgb[1], 10).toString(16)}`).slice(-2)
		}${(`0${parseInt(rgb[2], 10).toString(16)}`).slice(-2)
		}${(`0${parseInt(rgb[3], 10).toString(16)}`).slice(-2)}` : orig;
	}
}

export default MatColors;
