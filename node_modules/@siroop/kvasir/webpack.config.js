const path = require('path');
const webpack = require('webpack');
const BabiliPlugin = require('babili-webpack-plugin');

const rootPath = path.resolve('./');
const sourcePath = path.resolve('./source');

const plugins = [
	new webpack.ProvidePlugin({
		$: 'jquery',
		jQuery: 'jquery',
	}),
];

// Uglyfing
if (JSON.parse(process.env.JS_MINIFY)) {
	plugins.push(
		new BabiliPlugin({
			mangle: {
				keepFnName: true,
			},
			removeConsole: true,
			removeDebugger: true,
			simplify: true,
			booleans: true,
		})
	)
}

// Sourcemaps
if (JSON.parse(process.env.WEBPACK_SOURCEMAP_DEVTOOL_PLUGIN)) {
	plugins.push(
		new webpack.SourceMapDevToolPlugin({
			filename: null,
			test: /\.(js)($|\?)/i,
		})
	)
}

const rules = [
	{
		test: /\.js$/,
		exclude: /(node_modules)/,
		use: [
			{
				loader: 'babel-loader',
				options: {
					cacheDirectory: true,
					presets: [
						['env', {
							targets: {
								browsers: ['last 2 versions'],
								ie: 9,
							},
							useBuiltIns: true,
						}],
					],
				},
			},
		],
	},
	{
		test: require.resolve('jquery'),
		use: [{
			loader: 'expose-loader',
			options: 'jQuery'
		},{
			loader: 'expose-loader',
			options: '$'
		}]
	}
];

if (JSON.parse(process.env.WEBPACK_ISTANBUL_INSTRUMENT_LOADER)) {
	rules.push({
		test: /\.js$/,
		exclude: /(\.spec\.js|\.config\.js$)/,
		include: [
			path.resolve(sourcePath, '70-templates'),
			path.resolve(sourcePath, '60-components/66-organisms'),
			path.resolve(sourcePath, '60-components/64-molecules'),
			path.resolve(sourcePath, '60-components/62-atoms'),
		],
		loader: 'istanbul-instrumenter-loader',
		enforce: 'post',
	});
}

module.exports = () => {
	const config = {
		mode: process.env.WEBPACK_MODE,
		devtool: process.env.WEBPACK_DEVTOOL,
		entry: {
			default: path.resolve(sourcePath, '_assets/scripts/default'),
			styleguide: path.resolve(sourcePath, '_assets/scripts/styleguide'),
		},
		output: {
			filename: '[name].js',
		},
		resolve: {
			modules: [
				path.resolve(rootPath, 'node_modules'),
				sourcePath,
			],
			alias: {
				templates: path.resolve(sourcePath, '70-templates'),
				organisms: path.resolve(sourcePath, '60-components/66-organisms'),
				molecules: path.resolve(sourcePath, '60-components/64-molecules'),
				atoms: path.resolve(sourcePath, '60-components/62-atoms'),
			},
		},
		module: {
			rules,
		},
		plugins,
	};

	return config;
};
