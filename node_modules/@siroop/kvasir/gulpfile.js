'use strict';

const gulp			= require('gulp');
const del			= require('del');
const getTask		= require('./gulp/utils').getTask;
const dotenv		= require('dotenv');
const rename		= require('gulp-rename');

// Load dot env vars
dotenv.config();

const destRoot = 'public/assets';

const jsMinify = JSON.parse(process.env.JS_MINIFY);
const jsLintFailOnError = JSON.parse(process.env.JS_LINT_FAIL_ON_ERROR);

const sassLintFailOnError = JSON.parse(process.env.CSS_LINT_FAIL_ON_ERROR);
const cssSourcemaps = JSON.parse(process.env.CSS_SOURCEMAPS);
const cssMinify = JSON.parse(process.env.CSS_MINIFY);
const cssPrefix = JSON.parse(process.env.CSS_KVASIR_PREFIX);

const paths = {
	css: {
		srcAssets: 'source/_assets/styles/**/*.scss',
		srcComponents: 'source/**/*.scss',
		dest: destRoot + '/css',
	},
	js: {
		src: ['source/**/*.js', '!source/**/*.spec.js'],
		dest: destRoot + '/js',
		tmp: 'source/_assets/js/**/*.js',
		test: 'source/**/*.spec.js',
	},
	images: {
		src: 'source/_assets/img/**/*',
		dest: destRoot + '/img',
	},
	videos: {
		src: 'source/_assets/videos/**/*',
		dest: destRoot + '/videos',
	},
	fonts: {
		src: 'source/_assets/fonts/**/*',
		dest: destRoot + '/fonts',
	},
};

const autoprefixerConfig = {
	cascade: false,
};

const sassConfig = {
	includePaths: ['node_modules'],
	sourceMaps: cssSourcemaps,
};

const postcsswrapConfig = {
	selector: '.kvasir',
	skip: [/.*\.kvasir.*/, /.*\.no-js*/],
};

const eslintConfig = {
	useEslintrc: true,
	failOnError: jsLintFailOnError,
};

const sasslintConfig = {
	failOnError: sassLintFailOnError,
};

// Fractal
gulp.task('fractal:serve', getTask('fractal-serve'));
gulp.task('fractal:build', getTask('fractal-build'));


// CSS
gulp.task('css:clean', () => del([paths.css.dest]));
gulp.task('css:process', getTask('css-process', {
	pathSrc: paths.css.srcAssets,
	pathDest: paths.css.dest,
	autoprefixerConfig,
	sassConfig,
	postcsswrapConfig,
	sourcemaps: cssSourcemaps,
	cssMin: cssMinify,
	cssKvasirPrefix: cssPrefix,
}));


gulp.task('css:lint', getTask('css-lint', { srcPath: paths.css.srcComponents, sasslintConfig }));
gulp.task('css:watch', () => {
	gulp.watch([paths.css.srcAssets, paths.css.srcComponents], gulp.series('css:process'));
});

// JS
gulp.task('js:clean', () => del([paths.js.dest]));
gulp.task('js:process', getTask('js-process', { paths, jsMinify }));
gulp.task('js:lint', 	getTask('js-lint', { paths, eslintConfig }));
gulp.task('js:fixture', getTask('js-fixture', { paths }));
gulp.task('js:unit', 	getTask('js-unit'));
gulp.task('js:test', 	gulp.series('js:fixture', 'js:unit'));
gulp.task('js:watch', () => { gulp.watch(paths.js.src, gulp.series('js')); });
gulp.task('js', gulp.parallel('js:lint', 'js:process'));


// Images
gulp.task('images:copy', getTask('images-copy', { paths }));
gulp.task('images:clean', done => del([paths.images.dest], done));
gulp.task('images:watch', () => { gulp.watch(paths.images.src, gulp.parallel('images:copy')); });


// Videos
gulp.task('videos:copy', getTask('videos-copy', { paths }));
gulp.task('videos:clean', done => del([paths.videos.dest], done));
gulp.task('videos:watch', () => { gulp.watch(paths.images.src, gulp.parallel('videos:copy')); });


// Fonts
gulp.task('fonts:copy', getTask('fonts-copy', { paths }));
gulp.task('fonts:clean', done => del([paths.fonts.dest], done));
gulp.task('fonts:watch', () => { gulp.watch(paths.fonts.src, gulp.parallel('fonts:copy')); });

// Main tasks
gulp.task('copy:assets', gulp.parallel('images:copy', 'videos:copy', 'fonts:copy'));
gulp.task('clean', 		 gulp.parallel('css:clean', 'js:clean', 'videos:clean', 'images:clean', 'fonts:clean'));
gulp.task('watch',  	 gulp.parallel('css:watch', 'css:lint', 'js:watch', 'js:lint', 'videos:watch', 'images:watch', 'fonts:watch'));


// Build Tasks
gulp.task('build', 	gulp.series('copy:assets', 'css:process', 'js:process'));

// Default Tasks
gulp.task('default', gulp.series('copy:assets', 'css:process',  'js:process', 'fractal:serve'));

// Development Tasks
gulp.task('dev', gulp.series('copy:assets', 'fractal:serve', 'css:process',  'js:process', 'watch'));
