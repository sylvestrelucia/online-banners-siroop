'use strict';

// require modules
const path = require('path');
const fractal = require('@frctl/fractal').create();
const version = 'dev'; // adjust this for different envs

// default settings
fractal.set('project.title', `Siroop Components Library | ${version}`);
fractal.set('project.version', version);
fractal.set('project.author', 'Siroop');

// set component path
fractal.components.set('path', path.join(__dirname, 'source'));

// tbd describe this two lines
fractal.components.set('default.preview', '@l-default');
fractal.components.set('default.status', 'not_defined');

// components statuses
fractal.components.set('statuses', {
	not_defined: {
		label: 'Not defined',
		description: 'Please specify status.',
		color: '#b3b3b3',
	},
	prototype: {
		label: 'Prototype',
		description: 'Do not implement.',
		color: '#3399ff',
	},
	wip: {
		label: 'WIP',
		description: 'Work in progress. Implement with caution.',
		color: '#FF9233',
	},
	broken: {
		label: 'Broken',
		description: 'Broken. Do not implement.',
		color: '#FF3333',
	},
	ready: {
		label: 'QA passed',
		description: 'Ready to be implemented.',
		color: '#29CC29',
	},
	live: {
		label: 'Live',
		description: 'Implemented.',
		color: '#6f42c1',
	},
	deprecated: {
		label: 'Deprecated',
		description: 'Do not implement. Use new or other component instead',
		color: '#660033',
	},
});

// docs statuses
fractal.docs.set('statuses', {
	draft: {
		label: 'Draft',
		description: 'Work in progress.',
		color: '#FF3333',
	},
	ready: {
		label: 'Ready',
		description: 'Ready for referencing.',
		color: '#29CC29',
	},
});


// docs
fractal.docs.set('path', path.join(__dirname, 'docs'));

// Define dev server stuff
fractal.web.set('server.syncOptions', {
	open: true,
	browser: ['google chrome'],
	notify: false,
	watchOptions: {
		// Setting wich file to load only after passing throug gulp tasks
		ignored: [
			path.join(__dirname, '/source/**/*.js'),
			'!' + path.join(__dirname, '/source/**/*.config.js'),
			path.join(__dirname, '/source/**/*.scss'),
			path.join(__dirname, '/source/_assets/(img|videos|font)/**/*'),
		],
	},
});

// Set static path for static generated styleguide
fractal.web.set('static.path', path.join(__dirname, '/public/assets'));

// Set destination for build
fractal.web.set('builder.dest', path.join(__dirname, '/public'));

// Use twig as default template engine
const twigAdapter = require('frctl-twig');

fractal.components.engine(twigAdapter);
fractal.components.set('ext', '.twig');

const theme = require('@frctl/mandelbrot')({
	skin: 'white',
	nav: ['docs', 'components'],
	styles: ['default', '/css/fractal.css'],
	favicon: '/img/icon/favicon.ico',
});

fractal.web.theme(theme);

module.exports = fractal;
